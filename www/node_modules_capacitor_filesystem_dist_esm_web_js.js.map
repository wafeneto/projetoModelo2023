{"version":3,"file":"node_modules_capacitor_filesystem_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"names":["WebPlugin","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","arguments","DB_VERSION","DB_NAME","_writeCmds","initDb","_db","undefined","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","options","entry","Error","data","content","writeFile","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","writeResult","contents","filename","str","err","_debug"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}