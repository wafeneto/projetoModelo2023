{"version":3,"file":"node_modules_capacitor-community_http_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor-community/http/dist/esm/cookie.js","./node_modules/@capacitor-community/http/dist/esm/request.js","./node_modules/@capacitor-community/http/dist/esm/utils.js","./node_modules/@capacitor-community/http/dist/esm/web.js"],"sourcesContent":["import { encode, decode } from './utils';\n/**\n * Set a cookie\n * @param key The key to set\n * @param value The value to set\n * @param options Optional additional parameters\n */\nexport const setCookie = (key, value, options = {}) => {\n    // Safely Encoded Key/Value\n    const encodedKey = encode(key);\n    const encodedValue = encode(value);\n    // Clean & sanitize options\n    const expires = `; expires=${(options.expires || '').replace('expires=', '')}`; // Default is \"; expires=\"\n    const path = (options.path || '/').replace('path=', ''); // Default is \"path=/\"\n    document.cookie = `${encodedKey}=${encodedValue || ''}${expires}; path=${path}`;\n};\n/**\n * Gets all HttpCookies\n */\nexport const getCookies = () => {\n    const output = [];\n    const map = {};\n    if (!document.cookie) {\n        return output;\n    }\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        // Replace first \"=\" with CAP_COOKIE to prevent splitting on additional \"=\"\n        let [k, v] = cookie.replace(/=/, 'CAP_COOKIE').split('CAP_COOKIE');\n        k = decode(k).trim();\n        v = decode(v).trim();\n        map[k] = v;\n    }\n    const entries = Object.entries(map);\n    for (const [key, value] of entries) {\n        output.push({\n            key,\n            value,\n        });\n    }\n    return output;\n};\n/**\n * Gets a single HttpCookie given a key\n */\nexport const getCookie = (key) => {\n    const cookies = getCookies();\n    for (const cookie of cookies) {\n        if (cookie.key === key) {\n            return cookie;\n        }\n    }\n    return {\n        key,\n        value: '',\n    };\n};\n/**\n * Deletes a cookie given a key\n * @param key The key of the cookie to delete\n */\nexport const deleteCookie = (key) => {\n    document.cookie = `${key}=; Max-Age=0`;\n};\n/**\n * Clears out cookies by setting them to expire immediately\n */\nexport const clearCookies = () => {\n    const cookies = document.cookie.split(';') || [];\n    for (const cookie of cookies) {\n        document.cookie = cookie\n            .replace(/^ +/, '')\n            .replace(/=.*/, `=;expires=${new Date().toUTCString()};path=/`);\n    }\n};\n","import { readBlobAsBase64 } from './utils';\n/**\n * Normalize an HttpHeaders map by lowercasing all of the values\n * @param headers The HttpHeaders object to normalize\n */\nconst normalizeHttpHeaders = (headers = {}) => {\n    const originalKeys = Object.keys(headers);\n    const loweredKeys = Object.keys(headers).map(k => k.toLocaleLowerCase());\n    const normalized = loweredKeys.reduce((acc, key, index) => {\n        acc[key] = headers[originalKeys[index]];\n        return acc;\n    }, {});\n    return normalized;\n};\n/**\n * Builds a string of url parameters that\n * @param params A map of url parameters\n * @param shouldEncode true if you should encodeURIComponent() the values (true by default)\n */\nconst buildUrlParams = (params, shouldEncode = true) => {\n    if (!params)\n        return null;\n    const output = Object.entries(params).reduce((accumulator, entry) => {\n        const [key, value] = entry;\n        let encodedValue;\n        let item;\n        if (Array.isArray(value)) {\n            item = '';\n            value.forEach(str => {\n                encodedValue = shouldEncode ? encodeURIComponent(str) : str;\n                item += `${key}=${encodedValue}&`;\n            });\n            // last character will always be \"&\" so slice it off\n            item.slice(0, -1);\n        }\n        else {\n            encodedValue = shouldEncode ? encodeURIComponent(value) : value;\n            item = `${key}=${encodedValue}`;\n        }\n        return `${accumulator}&${item}`;\n    }, '');\n    // Remove initial \"&\" from the reduce\n    return output.substr(1);\n};\n/**\n * Build the RequestInit object based on the options passed into the initial request\n * @param options The Http plugin options\n * @param extra Any extra RequestInit values\n */\nexport const buildRequestInit = (options, extra = {}) => {\n    const output = Object.assign({ method: options.method || 'GET', headers: options.headers }, extra);\n    // Get the content-type\n    const headers = normalizeHttpHeaders(options.headers);\n    const type = headers['content-type'] || '';\n    // If body is already a string, then pass it through as-is.\n    if (typeof options.data === 'string') {\n        output.body = options.data;\n    }\n    // Build request initializers based off of content-type\n    else if (type.includes('application/x-www-form-urlencoded')) {\n        const params = new URLSearchParams();\n        for (const [key, value] of Object.entries(options.data || {})) {\n            params.set(key, value);\n        }\n        output.body = params.toString();\n    }\n    else if (type.includes('multipart/form-data')) {\n        const form = new FormData();\n        if (options.data instanceof FormData) {\n            options.data.forEach((value, key) => {\n                form.append(key, value);\n            });\n        }\n        else {\n            for (let key of Object.keys(options.data)) {\n                form.append(key, options.data[key]);\n            }\n        }\n        output.body = form;\n        const headers = new Headers(output.headers);\n        headers.delete('content-type'); // content-type will be set by `window.fetch` to includy boundary\n        output.headers = headers;\n    }\n    else if (type.includes('application/json') ||\n        typeof options.data === 'object') {\n        output.body = JSON.stringify(options.data);\n    }\n    return output;\n};\n/**\n * Perform an Http request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const request = async (options) => {\n    const requestInit = buildRequestInit(options, options.webFetchExtra);\n    const urlParams = buildUrlParams(options.params, options.shouldEncodeUrlParams);\n    const url = urlParams ? `${options.url}?${urlParams}` : options.url;\n    const response = await fetch(url, requestInit);\n    const contentType = response.headers.get('content-type') || '';\n    // Default to 'text' responseType so no parsing happens\n    let { responseType = 'text' } = response.ok ? options : {};\n    // If the response content-type is json, force the response to be json\n    if (contentType.includes('application/json')) {\n        responseType = 'json';\n    }\n    let data;\n    switch (responseType) {\n        case 'arraybuffer':\n        case 'blob':\n            const blob = await response.blob();\n            data = await readBlobAsBase64(blob);\n            break;\n        case 'json':\n            data = await response.json();\n            break;\n        case 'document':\n        case 'text':\n        default:\n            data = await response.text();\n    }\n    // Convert fetch headers to Capacitor HttpHeaders\n    const headers = {};\n    response.headers.forEach((value, key) => {\n        headers[key] = value;\n    });\n    return {\n        data,\n        headers,\n        status: response.status,\n        url: response.url,\n    };\n};\n/**\n * Perform an Http GET request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const get = async (options) => request(Object.assign(Object.assign({}, options), { method: 'GET' }));\n/**\n * Perform an Http POST request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const post = async (options) => request(Object.assign(Object.assign({}, options), { method: 'POST' }));\n/**\n * Perform an Http PUT request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const put = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PUT' }));\n/**\n * Perform an Http PATCH request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const patch = async (options) => request(Object.assign(Object.assign({}, options), { method: 'PATCH' }));\n/**\n * Perform an Http DELETE request given a set of options\n * @param options Options to build the HTTP request\n */\nexport const del = async (options) => request(Object.assign(Object.assign({}, options), { method: 'DELETE' }));\n","/**\n * Read in a Blob value and return it as a base64 string\n * @param blob The blob value to convert to a base64 string\n */\nexport const readBlobAsBase64 = async (blob) => new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n        const base64String = reader.result;\n        const base64StringWithoutTags = base64String.substr(base64String.indexOf(',') + 1); // remove prefix \"data:application/pdf;base64,\"\n        resolve(base64StringWithoutTags);\n    };\n    reader.onerror = (error) => reject(error);\n    reader.readAsDataURL(blob);\n});\n/**\n * Safely web encode a string value (inspired by js-cookie)\n * @param str The string value to encode\n */\nexport const encode = (str) => encodeURIComponent(str)\n    .replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent)\n    .replace(/[()]/g, escape);\n/**\n * Safely web decode a string value (inspired by js-cookie)\n * @param str The string value to decode\n */\nexport const decode = (str) => str.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n","import { WebPlugin } from '@capacitor/core';\nimport * as Cookie from './cookie';\nimport * as Request from './request';\nexport class HttpWeb extends WebPlugin {\n    constructor() {\n        super();\n        /**\n         * Perform an Http request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.request = async (options) => Request.request(options);\n        /**\n         * Perform an Http GET request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.get = async (options) => Request.get(options);\n        /**\n         * Perform an Http POST request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.post = async (options) => Request.post(options);\n        /**\n         * Perform an Http PUT request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.put = async (options) => Request.put(options);\n        /**\n         * Perform an Http PATCH request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.patch = async (options) => Request.patch(options);\n        /**\n         * Perform an Http DELETE request given a set of options\n         * @param options Options to build the HTTP request\n         */\n        this.del = async (options) => Request.del(options);\n        /**\n         * Gets all HttpCookies as a Map\n         */\n        this.getCookiesMap = async (\n        // @ts-ignore\n        options) => {\n            const cookies = Cookie.getCookies();\n            const output = {};\n            for (const cookie of cookies) {\n                output[cookie.key] = cookie.value;\n            }\n            return output;\n        };\n        /**\n         * Get all HttpCookies as an object with the values as an HttpCookie[]\n         */\n        this.getCookies = async (options) => {\n            // @ts-ignore\n            const { url } = options;\n            const cookies = Cookie.getCookies();\n            return { cookies };\n        };\n        /**\n         * Set a cookie\n         * @param key The key to set\n         * @param value The value to set\n         * @param options Optional additional parameters\n         */\n        this.setCookie = async (options) => {\n            const { key, value, expires = '', path = '' } = options;\n            Cookie.setCookie(key, value, { expires, path });\n        };\n        /**\n         * Gets all cookie values unless a key is specified, then return only that value\n         * @param key The key of the cookie value to get\n         */\n        this.getCookie = async (options) => Cookie.getCookie(options.key);\n        /**\n         * Deletes a cookie given a key\n         * @param key The key of the cookie to delete\n         */\n        this.deleteCookie = async (options) => Cookie.deleteCookie(options.key);\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearCookies = async (\n        // @ts-ignore\n        options) => Cookie.clearCookies();\n        /**\n         * Clears out cookies by setting them to expire immediately\n         */\n        this.clearAllCookies = async () => Cookie.clearCookies();\n        /**\n         * Uploads a file through a POST request\n         * @param options TODO\n         */\n        this.uploadFile = async (options) => {\n            const formData = new FormData();\n            formData.append(options.name, options.blob || 'undefined');\n            const fetchOptions = Object.assign(Object.assign({}, options), { body: formData, method: 'POST' });\n            return this.post(fetchOptions);\n        };\n        /**\n         * Downloads a file\n         * @param options TODO\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = Request.buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                let chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        type: 'DOWNLOAD',\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                let allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            return {\n                blob,\n            };\n        };\n    }\n}\n"],"names":["encode","decode","setCookie","key","value","options","encodedKey","encodedValue","expires","replace","path","document","cookie","getCookies","output","map","cookies","split","k","v","trim","entries","Object","push","getCookie","deleteCookie","clearCookies","Date","toUTCString","readBlobAsBase64","normalizeHttpHeaders","headers","originalKeys","keys","loweredKeys","toLocaleLowerCase","normalized","reduce","acc","index","buildUrlParams","params","shouldEncode","accumulator","entry","item","Array","isArray","forEach","str","encodeURIComponent","slice","substr","buildRequestInit","extra","assign","method","type","data","body","includes","URLSearchParams","set","toString","form","FormData","append","Headers","delete","JSON","stringify","request","requestInit","webFetchExtra","urlParams","shouldEncodeUrlParams","url","response","fetch","contentType","get","responseType","ok","blob","json","text","status","post","put","patch","del","Promise","resolve","reject","reader","FileReader","onload","base64String","result","base64StringWithoutTags","indexOf","onerror","error","readAsDataURL","decodeURIComponent","escape","WebPlugin","Cookie","Request","HttpWeb","constructor","getCookiesMap","clearAllCookies","uploadFile","formData","name","fetchOptions","downloadFile","progress","Blob","getReader","bytes","chunks","contentLength","parseInt","done","read","length","notifyListeners","allChunks","Uint8Array","position","chunk","buffer","undefined"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1,2,3]}