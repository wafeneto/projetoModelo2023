{"version":3,"file":"node_modules_ionic_pwa-elements_dist_esm_shadow-css-d7d058ec-d59cb009_js.js","mappings":"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","sources":["./node_modules/@ionic/pwa-elements/dist/esm/shadow-css-d7d058ec-d59cb009.js"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nconst safeSelector = (selector) => {\n    const placeholders = [];\n    let index = 0;\n    let content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n        const replaceBy = `__ph-${index}__`;\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    const ss = {\n        content,\n        placeholders,\n    };\n    return ss;\n};\nconst restoreSafeSelector = (placeholders, content) => {\n    return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nconst _polyfillHost = '-shadowcsshost';\nconst _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nconst _polyfillHostContext = '-shadowcsscontext';\nconst _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nconst _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nconst _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nconst _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nconst _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nconst _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nconst _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nconst _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nconst _polyfillHostRe = /-shadowcsshost/gim;\nconst _colonHostRe = /:host/gim;\nconst _colonSlottedRe = /::slotted/gim;\nconst _colonHostContextRe = /:host-context/gim;\nconst _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nconst stripComments = (input) => {\n    return input.replace(_commentRe, '');\n};\nconst _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nconst extractCommentsWithHash = (input) => {\n    return input.match(_commentWithHashRe) || [];\n};\nconst _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nconst _curlyRe = /([{}])/g;\nconst OPEN_CURLY = '{';\nconst CLOSE_CURLY = '}';\nconst BLOCK_PLACEHOLDER = '%BLOCK%';\nconst processRules = (input, ruleCallback) => {\n    const inputWithEscapedBlocks = escapeBlocks(input);\n    let nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n        const selector = m[2];\n        let content = '';\n        let suffix = m[4];\n        let contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        const cssRule = {\n            selector,\n            content\n        };\n        const rule = ruleCallback(cssRule);\n        return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n    });\n};\nconst escapeBlocks = (input) => {\n    const inputParts = input.split(_curlyRe);\n    const resultParts = [];\n    const escapedBlocks = [];\n    let bracketCount = 0;\n    let currentBlockParts = [];\n    for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        const part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    const strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nconst insertPolyfillHostInCssText = (selector) => {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nconst convertColonRule = (cssText, regExp, partReplacer) => {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, (...m) => {\n        if (m[2]) {\n            const parts = m[2].split(',');\n            const r = [];\n            for (let i = 0; i < parts.length; i++) {\n                const p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nconst colonHostPartReplacer = (host, part, suffix) => {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nconst convertColonHost = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nconst colonHostContextPartReplacer = (host, part, suffix) => {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nconst convertColonSlotted = (cssText, slotScopeId) => {\n    const slotClass = '.' + slotScopeId + ' > ';\n    const selectors = [];\n    cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n        if (m[2]) {\n            const compound = m[2].trim();\n            const suffix = m[3];\n            const slottedSelector = slotClass + compound + suffix;\n            let prefixSelector = '';\n            for (let i = m[4] - 1; i >= 0; i--) {\n                const char = m[5][i];\n                if (char === '}' || char === ',') {\n                    break;\n                }\n                prefixSelector = char + prefixSelector;\n            }\n            const orgSelector = prefixSelector + slottedSelector;\n            const addedSelector = `${prefixSelector.trimRight()}${slottedSelector.trim()}`;\n            if (orgSelector.trim() !== addedSelector.trim()) {\n                const updatedSelector = `${addedSelector}, ${orgSelector}`;\n                selectors.push({\n                    orgSelector,\n                    updatedSelector,\n                });\n            }\n            return slottedSelector;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n    return {\n        selectors,\n        cssText\n    };\n};\nconst convertColonHostContext = (cssText) => {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nconst convertShadowDOMSelectors = (cssText) => {\n    return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, ' '), cssText);\n};\nconst makeScopeMatcher = (scopeSelector) => {\n    const lre = /\\[/g;\n    const rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nconst selectorNeedsScoping = (selector, scopeSelector) => {\n    const re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nconst applySimpleSelectorScope = (selector, scopeSelector, hostSelector) => {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        const replaceBy = `.${hostSelector}`;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, (_, selector) => {\n            return selector.replace(/([^:]*)(:*)(.*)/, (_, before, colon, after) => {\n                return before + replaceBy + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nconst applyStrictSelectorScope = (selector, scopeSelector, hostSelector) => {\n    const isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, (_, ...parts) => parts[0]);\n    const className = '.' + scopeSelector;\n    const _scopeSelectorPart = (p) => {\n        let scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            const t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                const matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    const safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    let scopedSelector = '';\n    let startIndex = 0;\n    let res;\n    const sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    let shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        const separator = res[1];\n        const part = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n        const scopedPart = shouldScope ? _scopeSelectorPart(part) : part;\n        scopedSelector += `${scopedPart} ${separator} `;\n        startIndex = sep.lastIndex;\n    }\n    const part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nconst scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n    return selector.split(',')\n        .map(shallowPart => {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nconst scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) => {\n    return processRules(cssText, (rule) => {\n        let selector = rule.selector;\n        let content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        const cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content\n        };\n        return cssRule;\n    });\n};\nconst scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) => {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    const slotted = convertColonSlotted(cssText, slotScopeId);\n    cssText = slotted.cssText;\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return {\n        cssText: cssText.trim(),\n        slottedSelectors: slotted.selectors,\n    };\n};\nconst scopeCss = (cssText, scopeId, commentOriginalSelector) => {\n    const hostScopeId = scopeId + '-h';\n    const slotScopeId = scopeId + '-s';\n    const commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    const orgSelectors = [];\n    if (commentOriginalSelector) {\n        const processCommentedSelector = (rule) => {\n            const placeholder = `/*!@___${orgSelectors.length}___*/`;\n            const comment = `/*!@${rule.selector}*/`;\n            orgSelectors.push({ placeholder, comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, rule => {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = [scoped.cssText, ...commentsWithHash].join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(({ placeholder, comment }) => {\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    scoped.slottedSelectors.forEach(slottedSelector => {\n        cssText = cssText.replace(slottedSelector.orgSelector, slottedSelector.updatedSelector);\n    });\n    return cssText;\n};\n\nexport { scopeCss };\n"],"names":["safeSelector","selector","placeholders","index","content","replace","_","keep","replaceBy","push","pseudo","exp","ss","restoreSafeSelector","_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_selectorReSuffix","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","stripComments","input","_commentWithHashRe","extractCommentsWithHash","match","_ruleRe","_curlyRe","OPEN_CURLY","CLOSE_CURLY","BLOCK_PLACEHOLDER","processRules","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","m","suffix","contentPrefix","startsWith","blocks","substring","length","cssRule","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","join","strEscapedBlocks","insertPolyfillHostInCssText","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","colonHostPartReplacer","host","convertColonHost","colonHostContextPartReplacer","indexOf","convertColonSlotted","slotScopeId","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimRight","updatedSelector","convertColonHostContext","convertShadowDOMSelectors","reduce","result","pattern","makeScopeMatcher","scopeSelector","lre","rre","selectorNeedsScoping","re","test","applySimpleSelectorScope","hostSelector","lastIndex","before","colon","after","applyStrictSelectorScope","isRe","className","_scopeSelectorPart","scopedP","t","matches","safeContent","scopedSelector","startIndex","res","sep","hasHost","shouldScope","exec","separator","slice","scopedPart","scopeSelectorText","slotSelector","map","shallowPart","scopeSelectors","commentOriginalSelector","scopeCssText","scopeId","hostScopeId","slotted","slottedSelectors","scopeCss","commentsWithHash","orgSelectors","processCommentedSelector","placeholder","comment","scoped","forEach"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}